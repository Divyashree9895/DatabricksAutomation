# When The Release Branch Is Tagged With A Version Number, The Release Branch Code Is
# Deployed To The Production Environment
# Pipeline Is Triggered When ANY Branch Is Tagged EXCLUDING Main, Thereby Ensuring Only Release Is Used, 
# Given That We Never Tag Feature Branches .

# If A New Release Branch Is Created Then Branch Name In The File Needs To Be Updated. (Need To Find A Dynamic Way To Do This)

# git tag -a v1.0.1 -m "my version 1.0.1"
# git tag -l
# git push origin v1.0.1
# git tag -d v1.0.1

on:
  push:
    branches:
      - release-**
    tags:
      - 'v**'


permissions:
      id-token:               write
      contents:               read

jobs:
    Tag_Release_Branch:
      if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      name:                     Tag_Release_Branch
      runs-on:                  ubuntu-latest
      strategy:
        matrix:
          environments:          [Production]    
    
      steps:
        - run: |
            echo "Tests"
            echo "${{ github.ref }}"
            echo "${{ github.head_ref }}"
            echo "${{ github.base_ref }}"
            echo "${{ github.repository  }}"


        - uses:                  actions/checkout@v3
          with:
            ref:                   'release-1.0.x' ## How Do We Dynamically Pull Through The Branch Name Of The Triggered Branch. echo "${{ github.ref }}" returns tag only 

        - uses: dorny/paths-filter@v2
          id: filter
          with:
            filters: |
              workflows:
                - 'src/**'   

        - name:                 Azure Login - ${{ matrix.environments }}
          uses:                 azure/login@v1
          with:
            creds:              ${{secrets.AZURE_CREDENTIALS}}
      

        - name:                 Azure Login - ${{ matrix.environments }}
          uses:                 azure/login@v1
          with:
            creds:              ${{secrets.AZURE_CREDENTIALS}}
      

        - name:                 Store JSON Param File Variables As Environ Variables
          uses:                 antifree/json-to-variables@v1.0.1
          with:
            filename:           '.github/workflows/Pipeline_Param/${{ matrix.environments }}.json'
            prefix:             param

        - name:                 Store BICEP Param JSON File Variables As Environ VariablesStore JSON Param File Variables As Environ Variables
          uses:                 antifree/json-to-variables@v1.0.1
          with:
            filename:           'Infrastructure/DBX_CICD_Deployment/Bicep_Params/${{ matrix.environments }}/Bicep.parameters.json'
            prefix:             param

# 5.  __Order Important__ Create Custom Role
        - name:                 Create Databricks Custom Role
          continue-on-error:    true
          run:                  bash ./.github/workflows/Utilities/Utils-Databricks-Create-Custom-Role.sh
          env:
            environment:        ${{ matrix.environments }}

        # Only run if file path !infra AND merging into main, then don't run this!
        #- name:                 Deploy DBX CICD Azure Resources
        #  if:                   steps.filter.outputs.workflows != 'true'
        #  run:                  bash ./.github/workflows/Utilities/Utils-Azure-Resources.sh
        #  env:
        #    environment:        ${{ matrix.environments }}


        - name:                 Assign RBAC Permissions
          if:                   steps.filter.outputs.workflows != 'true'
          run:                  sh ./.github/workflows/Utilities/Utils-Assign-RBAC.sh
          env:
            environment:        ${{ matrix.environments }}


        - name:                 Authenticate to DBX Service Principal + Set AAD Tokens As Env Variables
          run:                  bash ./.github/workflows/Utilities/Utils-DBX-AAD-Token-Autentication.sh
          env:
            ARM_CLIENT_ID:      ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET:  ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_TENANT_ID:      ${{ secrets.ARM_TENANT_ID }}

            
        - name:                 Setup Python
          uses:                 actions/setup-python@v4
          with:
            python-version:     '3.8'

# 7.  __Order Important__ Set Environment Variables For Resources Created On The Fly.
        - name:                 Set Environment Variables For Resources Created On The Fly.
          run:                  bash ./.github/workflows/Utilities/Utils-Env-Variables-For-Azure-Resources-Created.sh


        - name:                 Create And Store PAT Token In Key Vault
          run:                  bash ./.github/workflows/Utilities/Utils-Create-PAToken.sh

        - name:                 Save Databricks SP Credentials Within Secret Scopes  
          run:                  bash ./.github/workflows/Utilities/Utils-Create-Scope.sh


        - name:                 Create DBX Clusters
          if:                   steps.filter.outputs.workflows != 'true'
          run:                  bash ./.github/workflows/Utilities/Utils-Create-Cluster.sh
          env:
            environment:        ${{ matrix.environments }}


        - name:                 Create DBX Repos
          run:                  sh ./.github/workflows/Utilities/Utils-Create-Repo-Folders.sh
          env:
            environment:        ${{ matrix.environments }}
            PAT_GIT:            ${{ secrets.PAT_GIT }}
            ARM_CLIENT_ID:      ${{ secrets.ARM_CLIENT_ID }}


        - name:                   Install + Configure Databricks CLI
          run:                    bash ./.github/workflows/Utilities/Utils-DBX-CLI-Configure.sh


        #- name:                   Create Wheel Files & Upload To DBFS
        #  if:                     steps.filter.outputs.workflows != 'true'
        #  run:                    bash ./.github/workflows/Utilities/Utils-Create-Wheels-DBFS-Cluster-Upload.sh
        #  env:
        #    environment:          ${{ matrix.environments }}

        # INCLUDE GIT PULL HERE SO THAT THE UAT ENVIRONMENT HAS THE MOST UP TO DATE VERSION OF THE MAIN BRANCH -- 
        - run: |
            echo "${{ github.head_ref }}"
            echo "${{ github.base_ref }}"

        - name:                 Update Production Repo In Production Environment ( Branch)
          run:                  bash ./.github/workflows/Utilities/Utils-Git-Pull-DBX-Repo.sh
          env:
            BRANCH:          'release-1.0.x' # Should Be Release Branch. 
            UPDATE_FOLDER:  'ProductionFolder'