# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json



name: Infra - Feature Merge Into Main Approved - Deploy to DEV Env
on: 
  pull_request:
    branches:
      - main
    types:
      - opened
      - closed


permissions:
      id-token:               write
      contents:               read

jobs:
  # This will run when the pull request is open. This is were we do all of the unit testing prior to pull request review.
  # Ensure That All Checks must pass in the settings before it can be approved
  # Ensure at least one reviewer needed before merging in settings
  Pull_Request_Checks_Feature_To_Main:
    if:                         github.event_name == 'pull_request' && github.event.action == 'opened' && github.base_ref == 'main'
    name:                       Checks
    runs-on:                    ubuntu-latest
    steps:
      - run: |
          echo "Checks Test!!!"
      - run: |
          echo "${{ github.head_ref }}"
          echo "${{ github.base_ref }}"


  PR_Approved_Feature_To_Main:
      if:                       github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
      name:                     Infra - Feature Merge Into Main Approved - Deploy to DEV Env
      runs-on:                  ubuntu-latest
      strategy:
        matrix:
          environments:          [Development]    
    
      steps:
        - run: |
            echo "${{ github.head_ref }}"
            echo "${{ github.base_ref }}"

        
        - uses:               dorny/paths-filter@v2
          id:                 filter
          with:
            filters: |
              workflows:
                - 'src/**'

# 1.  Checkout Branch
        - uses:                 actions/checkout@v3
          with:
            ref:                ${{ github.base_ref }} 


# 2.  __Order Important__Login To Main Service Principal
        - name:                 Azure Login - ${{ matrix.environments }}
          uses:                 azure/login@v1
          with:
            creds:              ${{secrets.AZURE_CREDENTIALS}}
        

# 3.  __Order Important__ Create Env Variables From Parameters Files 
        - name:                 Store JSON Param File Variables As Environ Variables
          uses:                 antifree/json-to-variables@v1.0.1
          with:
            filename:           '.github/workflows/Pipeline_Param/${{ matrix.environments }}.json'
            prefix:             param
        
        - name:                 Store BICEP Param JSON File Variables As Environ VariablesStore JSON Param File Variables As Environ Variables
          uses:                 antifree/json-to-variables@v1.0.1
          with:
            filename:           'Infrastructure/DBX_CICD_Deployment/Bicep_Params/${{ matrix.environments }}/Bicep.parameters.json'
            prefix:             param


# 4.  __Order Important__ Create Custom Role
        - name:                 Create Databricks Custom Role
          continue-on-error:    true
          run:                  bash ./.github/workflows/Utilities/Utils-Databricks-Create-Custom-Role.sh
          env:
            environment:        ${{ matrix.environments }}
        

# 5.  Deploy Azure Resources    (BICEP) 
        - name:                 Deploy DBX CICD Azure Resources
          if:                   steps.filter.outputs.workflows != 'true'
          run:                  bash ./.github/workflows/Utilities/Utils-Azure-Resources.sh
          env:
            environment:        ${{ matrix.environments }}


# 6.  __Order Important__ Asign RBAC Permission
        - name:                 Assign RBAC Permissions
          if:                   steps.filter.outputs.workflows != 'true'
          run:                  sh ./.github/workflows/Utilities/Utils-Assign-RBAC.sh
          env:
            environment:        ${{ matrix.environments }}


# 7.  __Order Important__ Authenticate to DBX Service Principal + Set AAD Tokens As Env Variable
        - name:                 Authenticate to DBX Service Principal + Set AAD Tokens As Env Variables
          run:                  bash ./.github/workflows/Utilities/Utils-DBX-AAD-Token-Autentication.sh
          env:
            ARM_CLIENT_ID:      ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET:  ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_TENANT_ID:      ${{ secrets.ARM_TENANT_ID }}


# 8.  __Order Important__ Set Environment Variables For Resources Created On The Fly.
        - name:                 Set Environment Variables For Resources Created On The Fly.
          run:                  bash ./.github/workflows/Utilities/Utils-Env-Variables-For-Azure-Resources-Created.sh


# 9.  Set Up Python         
        - name:                 Setup Python
          uses:                 actions/setup-python@v4
          with:
            python-version:     '3.8'


# 10.  PAT Token --> Key Vault
        - name:                 Create And Store PAT Token In Key Vault
          run:                  bash ./.github/workflows/Utilities/Utils-Create-PAToken.sh


# 11.  Secret Scopes
        - name:                 Save Databricks SP Credentials Within Secret Scopes  
          run:                  bash ./.github/workflows/Utilities/Utils-Create-Scope.sh


# 12.   Create Databricks Jobs (Linked To Git Repo)
        - name:                 Create Databricks Jobs
          run:                  bash ./.github/workflows/Utilities/Utils-Create-Job.sh
          env:
            environment:        ${{ matrix.environments }}


# 13. Databricks Clusters      
        - name:                 Create DBX Cluster
          if:                   steps.filter.outputs.workflows != 'true'
          run:                  bash ./.github/workflows/Utilities/Utils-Create-Cluster.sh
          env:
            environment:        ${{ matrix.environments }}


# 14. Databricks Git Config
        - name:                 Create DBX Repos
          if:                   steps.filter.outputs.workflows != 'true'
          run:                  bash ./.github/workflows/Utilities/Utils-Create-Repo-Folders.sh
          env:
            environment:        ${{ matrix.environments }}
            PAT_GIT:            ${{ secrets.PAT_GIT }}
            ARM_CLIENT_ID:      ${{ secrets.ARM_CLIENT_ID }}


# 15. Databricks CLI Config
        - name:                   Install + Configure Databricks CLI
          run:                    bash ./.github/workflows/Utilities/Utils-DBX-CLI-Configure.sh


# 16. Update Databricks Git Repo 
        - name:                 Update Test Repo In Test Environment (Main Branch)
          run:                  bash ./.github/workflows/Utilities/Utils-Git-Pull-DBX-Repo.sh
          env:
            BRANCH:          ${{ github.base_ref }} # Should Be Main
            UPDATE_FOLDER:  'DevelopmentFolder'


# 17. Databricks Wheel File Creation + DBFS/Cluster Upload
        - name:                   Create Wheel Files & Upload To DBFS
          if:                     steps.filter.outputs.workflows != 'true'
          run:                    bash ./.github/workflows/Utilities/Utils-Create-Wheels-DBFS-Cluster-Upload.sh
          env:
            environment:          ${{ matrix.environments }}
