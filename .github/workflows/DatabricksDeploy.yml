# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json


# TO DO: Write A New Package For Setting Environment Variables From A Parameters File. 

name: Databricks Deploy
on:                          ["push"]
permissions:
      id-token:               write
      contents:               read

jobs:
  DBX_CICD_Deployment:
    name:                     DBX_CICD_Deployment
    runs-on:                  ubuntu-latest
    strategy:
      matrix:
        environments:          [Development]    
    steps:
      - uses:                 actions/checkout@v3  
      #  az ad sp create-for-rbac -n DevOpsAgentSP --role Contributor --scopes /subscriptions/4f1bc772-7792-4285-99d9-3463b8d7f994 --sdk-auth
      # Login To testappciaran. This Has Higher Privileges/ Ownership To Create Resources/RBACs. We Generally Wouldn't Be Given 
      # SP Secrets etc. As This Would Confer Too Much Power. Super Users Will Use This Login

      #- name:                 'Az CLI login ${{ matrix.environments }}'
      #  uses:                 azure/login@v1
      #  with:
      #    creds:              ${{secrets.AZURE_CREDENTIALS}}
      


      # For DBX Custom Role Permissions, (No RBAC Permissions Needed), Use This Login.
      # To Deploy Resources/Interact, Ensure The SP Has Contributor RBAC Assigned. 
      # Note: Check if you can assign rbacs WITHIN bicep using only Contributor. 
      - name:                  'Az CLI login DBX SP'
        uses:                   azure/login@v1
        with:
          client-id:            ${{ secrets.ARM_CLIENT_ID }}
          tenant-id:            ${{ secrets.ARM_TENANT_ID }}
          subscription-id:      ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
      


      - name:                 JSON To Env
        uses:                 antifree/json-to-variables@v1.0.1
        with:
          filename:           '.github/workflows/Global_Parameters/${{ matrix.environments }}.json'
          prefix:             param


      - name:                 Deploy DBX CICD Azure Resources
        run:                  sh ./.github/workflows/Utilities/Utils-Azure-Resources.sh

      # Day To Day Use Interacting With Databricks API Does Not Require God Rights ("testappciaran"). The Principal of Zero Trust Applies.
      # Therefore We Use The DBX SP (Only Has Databricks Custom Role Assignments - No Owner Permissions etc), For Interacting With Databricks...
      # API To Create Clusters/ Jobs etc. 

      - name:                 Authenticate to DBX SP
        run:                  bash ./.github/workflows/Utilities/Utils-DBX-SP-Authenticate.sh
        env:
          ARM_CLIENT_ID:      ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET:  ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID:      ${{ secrets.ARM_TENANT_ID }}

      - name:                 Assign RBAC Permissions 
        run:                  sh ./.github/workflows/Utilities/Utils-Assign-RBAC.sh
        env:
          environment:        ${{ matrix.environments }}
      

      - name:                 Create And Store PAT Token In Key Vault
        run:                  bash ./.github/workflows/Utilities/Utils-Create-PAToken.sh
        env:
          ARM_CLIENT_ID:      ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET:  ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID:      ${{ secrets.ARM_TENANT_ID }}


      - name:                 Create Secret Scopes
        run:                  bash ./.github/workflows/Utilities/Utils-Create-Scope.sh
        env:
          ARM_CLIENT_ID:      ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET:  ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID:      ${{ secrets.ARM_TENANT_ID }}


